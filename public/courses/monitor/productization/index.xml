<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>监控产品化 | ProgrammerTalk</title>
    <link>https://meixinyun.github.io/programmertalk/courses/monitor/productization/</link>
      <atom:link href="https://meixinyun.github.io/programmertalk/courses/monitor/productization/index.xml" rel="self" type="application/rss+xml" />
    <description>监控产品化</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 09 Sep 2018 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://meixinyun.github.io/programmertalk/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>监控产品化</title>
      <link>https://meixinyun.github.io/programmertalk/courses/monitor/productization/</link>
    </image>
    
    <item>
      <title>应用健康红绿大盘</title>
      <link>https://meixinyun.github.io/programmertalk/courses/monitor/productization/healthybox/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://meixinyun.github.io/programmertalk/courses/monitor/productization/healthybox/</guid>
      <description>&lt;h2 id=&#34;目标&#34;&gt;目标&lt;/h2&gt;
&lt;p&gt;通常，由于业务的复杂性，导致关键服务的核心指标也会非常繁多，我们基于这些指标会构建多个监控大盘。问题是: 这些指标构成的大盘虽然非常详细，但不够直观，并不能一眼就知道当前那些系统存在什么样的问题。为此我们需要一个高度抽象的服务健康红绿盘。&lt;/p&gt;
&lt;p&gt;通常，我们看到的仪表盘是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://codecapsule.com/wp-content/uploads/2016/08/effective-dashboards-01.jpg&#34; alt=&#34;dashbord_detail&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;健康红绿盘的需求分析&#34;&gt;健康红绿盘的需求分析&lt;/h2&gt;
&lt;h3 id=&#34;基本假设&#34;&gt;基本假设&lt;/h3&gt;
&lt;p&gt;为了更直观，我们假设所有的观察者：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不知到每个图表的具体含义&lt;/li&gt;
&lt;li&gt;不知道当系统处变得不健康时，图形应该是什么样子&lt;/li&gt;
&lt;li&gt;不知道内部组件以及他们如何组合在一起&lt;/li&gt;
&lt;li&gt;从未读过对应服务的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们看下如下的仪表盘：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://codecapsule.com/wp-content/uploads/2016/08/effective-dashboards-02.jpg&#34; alt=&#34;effective_dashboard&#34;&gt;&lt;/p&gt;
&lt;p&gt;从这个图中，我们可以直观的值得&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;log_statistics_minutely 服务挂了，它应该在过去的90分钟内停止了&lt;/li&gt;
&lt;li&gt;pupuet 服务可能在storage-31 存在问题，问题可能不是很严重。&lt;/li&gt;
&lt;li&gt;其它的服务应该是健康的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;健康红绿盘应该具有的基本信息&#34;&gt;健康红绿盘应该具有的基本信息&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;../../../monitor/productization/images/effective-dashboards-03.jpg&#34; alt=&#34;健康红绿盘&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务名称：代表那个服务&lt;/li&gt;
&lt;li&gt;状态：健康，警告，或严重（OK,WARNING,CRITICAL）&lt;/li&gt;
&lt;li&gt;简短信息提示: 一个简单的提示，表明是什么原因导致当前的状态&lt;/li&gt;
&lt;li&gt;操作码：服务处于当前这个状态的唯一标识符，通过该操作码能明确对应到对应的运维操作文档。此处是一个超级链接，能跳转到对应的运维操作文档。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;红绿盘的颜色需要简单明了，不能太多，否则容易让你迷惑&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../../monitor/productization/images/effective-dashboards-04.jpg&#34; alt=&#34;健康红绿盘&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;状态的设定&#34;&gt;状态的设定&lt;/h2&gt;
&lt;h2 id=&#34;运维操作码及关联的操作文档&#34;&gt;运维操作码及关联的操作文档&lt;/h2&gt;
&lt;h2 id=&#34;小结&#34;&gt;小结&lt;/h2&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;http://codecapsule.com/2016/08/11/optimize-your-monitoring-for-decision-making/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;optimize-your-monitoring-for-decision-making&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
